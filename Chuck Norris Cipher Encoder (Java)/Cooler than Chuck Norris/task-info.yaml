type: edu
files:
- name: src/chucknorris/Main.java
  visible: true
  text: "package chucknorris;\n\nimport java.util.Scanner;\n\npublic class Main {\n\
    \    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n\
    \        System.out.println(\"Input encoded string:\");\n        String inputString\
    \ =scanner.nextLine();\n        System.out.println(\"The result:\");\n       \
    \ decryption(inputString);\n//        System.out.println(1+2+4+8+16+32+64+128+256+512);\n\
    //        char[] str = scanner.nextLine().toCharArray();\n//        String converted\
    \ = \"\";\n//\n//        System.out.println();\n//        System.out.println(\"\
    The result:\");\n//\n//        for (char i : str)\n//        {\n//           \
    \ converted += String.format(\"%7s\", Integer.toBinaryString(i)).replace(\" \"\
    , \"0\");\n//        }\n//        encryption(converted);\n    }\n\n    public\
    \ static void encryption(String converted) {\n        int i = 0;\n        char\
    \ currentChar = '0';\n\n        while (i < converted.length()) {\n           \
    \ switch (converted.charAt(i)) {\n                case '0': {\n              \
    \      System.out.print(\"00 \");\n                    currentChar = '0';\n  \
    \                  break;\n                }\n                case '1': {\n  \
    \                  System.out.print(\"0 \");\n                    currentChar\
    \ = '1';\n                    break;\n                }\n            }\n\n   \
    \         while (converted.charAt(i) == currentChar) {\n                System.out.print(\"\
    0\");\n                i++;\n                if (i == converted.length()) break;\n\
    \            }\n\n            if (i < converted.length()) System.out.print(\"\
    \ \");\n        }\n    }\n\n    public static void decryption(String converted)\
    \ {\n        String[] x = converted.split(\" \");\n        String curent = \"\
    0\";\n        String result = \"\";\n        for (int i = 0; i < x.length; i++)\
    \ {\n\n            switch (x[i]) {\n                case \"00\" -> {\n       \
    \             curent = \"0\";\n                    i++;\n                }\n \
    \               case \"0\" -> {\n                    curent = \"1\";\n       \
    \             i++;\n                }\n            }\n\n\n            for (int\
    \ j = 0; j < x[i].length(); j++) {\n                \n                result +=\
    \ curent;\n                if (result.length() == 7) {\n                    \n\
    \                    System.out.print((char)Integer.parseInt(result, 2));\n  \
    \                  result = \"\";\n                }\n\n            }\n\n\n  \
    \      }\n    }\n}\n"
  learner_created: false
- name: test/ChuckNorrisTest.java
  visible: false
  text: |-
    import org.assertj.swing.util.Pair;
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;

    import java.util.ArrayList;
    import java.util.Arrays;
    import java.util.List;

    public class ChuckNorrisTest extends StageTest {

      @DynamicTest()
      CheckResult test() {
        TestedProgram pr = new TestedProgram();
        String output = pr.start().strip();
        List<String> list = new ArrayList<>(Arrays.asList(output.split("\n")));
        list.removeAll(Arrays.asList(""));

        if(list.size()!=1 || !list.get(0).contains("Please input operation (encode/decode/exit):")){
          return CheckResult.wrong("When the program just started, output should contain exactly 1 non-empty line, " +
                  "containing \"Please input operation (encode/decode/exit):\" as it shown in the example, followed by an input");
        }

        output = pr.execute("encode").strip().toLowerCase();
        list = new ArrayList<>(Arrays.asList(output.split("\n")));
        list.removeAll(Arrays.asList(""));
        if(list.size()!=1 || !list.get(0).contains("input string")){
          return CheckResult.wrong("When the user has chosen \"encode\" as an operation, there should be printed exactly 1 " +
                  "non-empty line, containing \"input string\" substring, followed by an input");
        }
        output = pr.execute("H W!").strip().toLowerCase();
        list = new ArrayList<>(Arrays.asList(output.split("\n")));
        list.removeAll(Arrays.asList(""));
        if(list.size()!=3 || !list.get(0).contains("encoded string") ||
                !list.get(2).contains("please input operation (encode/decode/exit):")){
          return CheckResult.wrong("When the user provided a string for encoding, there should be printed exactly 3 " +
                  "non-empty lines, the first one with \"encoded string\" substring, the second one, with an encoded string," +
                  "and the last one is \"Please input operation (encode/decode/exit):\" as an operation is finished and" +
                  "the program is looped");
        }
        if(!list.get(1).contains("0 0 00 00 0 0 00 0000 0 0 00 00000 0 0 00 0 0 0 00 0 0 000 00 0 0 0 00 0000 0 0")){
          return CheckResult.wrong("When the user provided a string for encoding, the second non-empty " +
                  "line of an output should contain an encoded string. Make sure, that encryption is correct and the " +
                  "encoding of a single character sequence is not separated.");
        }

        output = pr.execute("decode").strip().toLowerCase();
        list = new ArrayList<>(Arrays.asList(output.split("\n")));
        list.removeAll(Arrays.asList(""));
        if(list.size()!=1 || !list.get(0).contains("encoded string")){
          return CheckResult.wrong("When the user has chosen \"decode\" as an operation, there should be printed exactly 1 " +
                  "non-empty line, containing \"encoded string\" substring, followed by an input");
        }
        output = pr.execute("0 0 00 00 0 0 00 0000 0 0 00 00000 0 0 00 0 0 0 00 0 0 000 00 0 0 0 00 0000 0 0").strip().toLowerCase();
        list = new ArrayList<>(Arrays.asList(output.split("\n")));
        list.removeAll(Arrays.asList(""));
        if(list.size()!=3 || !list.get(0).contains("decoded string") ||
                !list.get(2).contains("please input operation (encode/decode/exit):")){
          return CheckResult.wrong("When the user provided a string for decoding, there should be printed exactly 3 " +
                  "non-empty lines, the first one with \"decoded string\" substring, the second one, with a decoded string," +
                  "and the last one is \"Please input operation (encode/decode/exit):\" as an operation is finished and" +
                  "the program is looped");
        }
        if(!list.get(1).contains("h w!")){
          return CheckResult.wrong("When the user provided a string for decoding, the second non-empty " +
                  "line of an output should contain a decoded string. Make sure, that decryption is correct.");
        }

        output = pr.execute("Hello world!").strip();
        list = new ArrayList<>(Arrays.asList(output.split("\n")));
        list.removeAll(Arrays.asList(""));
        if(list.size()!=2 || !list.get(0).contains("There is no 'Hello world!' operation") ||
                !list.get(1).contains("Please input operation (encode/decode/exit):")){
            return CheckResult.wrong("When the user had chosen an operation, that is not \"decode\", \"encode\" or \"exit\"," +
                    " there should be printed exactly 2 non-empty lines, the one that contains " +
                    "\"There is no '<user's input>' operation\" substring, and the \"Please input operation" +
                    " (encode/decode/exit):\" one as the program is looped");
        }
        for(String s : new String[]{"hello world!",
                "0 0 00 00 0 0 00 0000 0 0 00 0 0 00 0 0 0 00 0 0 000 00 0 0 0 00 0000 0 0",
                "0 0 00 00 0 0 00 000 0 0 00 0000 0 0 00 0 0 0 00 0 0 000 00 0 0 0 00 0000 0 0",
                "0 0 00 00 0 0 000 000"}) {
          pr.execute("decode");
          output = pr.execute(s).strip().toLowerCase();
          list = new ArrayList<>(Arrays.asList(output.split("\n")));
          list.removeAll(Arrays.asList(""));
          if (list.size() != 2 || !list.get(0).contains("not valid") ||
                  !list.get(1).contains("please input operation (encode/decode/exit):")) {
            return CheckResult.wrong("When the user provided not valid encoded string, there should be printed exactly 2 " +
                    "non-empty lines, the one that contains \"not valid\" substring, and the \"Please input " +
                    "operation (encode/decode/exit):\" one as an operation is finished and the program is looped");
          }
        }
        output = pr.execute("exit").strip().toLowerCase();
        if(!output.contains("bye") || !pr.isFinished()){
          return CheckResult.wrong("When the user has chosen \"exit\" as an operation, there should be \"Bye\" substring" +
                  " in output and the program should finish it's execution");
        }
        return CheckResult.correct();
      }
    }
  learner_created: false
feedback_link: https://hyperskill.org/projects/293/stages/1540/implement#comment
status: Solved
feedback:
  message: Well done! You've finished the project. Select a new project on <a href="https://hyperskill.org/projects">Hyperskill</a>
    to continue learning.
  time: "Thu, 20 Apr 2023 20:50:29 UTC"
record: -1
